/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */


export const AssetPairModel = {
  required: false,
  serializedName: 'AssetPairModel',
  type: {
    name: 'Composite',
    className: 'AssetPairModel',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'Id',
        type: {
          name: 'String'
        }
      },
      name: {
        required: false,
        serializedName: 'Name',
        type: {
          name: 'String'
        }
      },
      accuracy: {
        required: true,
        serializedName: 'Accuracy',
        type: {
          name: 'Number'
        }
      },
      invertedAccuracy: {
        required: true,
        serializedName: 'InvertedAccuracy',
        type: {
          name: 'Number'
        }
      },
      baseAssetId: {
        required: false,
        serializedName: 'BaseAssetId',
        type: {
          name: 'String'
        }
      },
      quotingAssetId: {
        required: false,
        serializedName: 'QuotingAssetId',
        type: {
          name: 'String'
        }
      },
      minVolume: {
        required: true,
        serializedName: 'MinVolume',
        type: {
          name: 'Number'
        }
      },
      minInvertedVolume: {
        required: true,
        serializedName: 'MinInvertedVolume',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const Fee = {
  required: false,
  serializedName: 'Fee',
  type: {
    name: 'Composite',
    className: 'Fee',
    modelProperties: {
      amount: {
        required: true,
        serializedName: 'Amount',
        type: {
          name: 'Number'
        }
      },
      type: {
        required: true,
        serializedName: 'Type',
        type: {
          name: 'Enum',
          allowedValues: [ 'Unknown', 'Absolute', 'Relative' ]
        }
      }
    }
  }
};

export const HistoryTradeModel = {
  required: false,
  serializedName: 'HistoryTradeModel',
  type: {
    name: 'Composite',
    className: 'HistoryTradeModel',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'Id',
        type: {
          name: 'String'
        }
      },
      dateTime: {
        required: true,
        serializedName: 'DateTime',
        type: {
          name: 'DateTime'
        }
      },
      state: {
        required: true,
        serializedName: 'State',
        type: {
          name: 'Enum',
          allowedValues: [ 'InProgress', 'Finished', 'Canceled', 'Failed' ]
        }
      },
      amount: {
        required: true,
        serializedName: 'Amount',
        type: {
          name: 'Number'
        }
      },
      asset: {
        required: false,
        serializedName: 'Asset',
        type: {
          name: 'String'
        }
      },
      assetPair: {
        required: false,
        serializedName: 'AssetPair',
        type: {
          name: 'String'
        }
      },
      price: {
        required: false,
        serializedName: 'Price',
        type: {
          name: 'Number'
        }
      },
      fee: {
        required: false,
        serializedName: 'Fee',
        type: {
          name: 'Composite',
          className: 'Fee'
        }
      }
    }
  }
};

export const ErrorModel = {
  required: false,
  serializedName: 'ErrorModel',
  type: {
    name: 'Composite',
    className: 'ErrorModel',
    modelProperties: {
      code: {
        required: true,
        serializedName: 'Code',
        type: {
          name: 'Enum',
          allowedValues: [ 'InvalidInputField', 'LowBalance', 'AlreadyProcessed', 'UnknownAsset', 'NoLiquidity', 'NotEnoughFunds', 'Dust', 'ReservedVolumeHigherThanBalance', 'NotFound', 'BalanceLowerThanReserved', 'LeadToNegativeSpread', 'Runtime' ]
        }
      },
      field: {
        required: false,
        serializedName: 'Field',
        type: {
          name: 'String'
        }
      },
      message: {
        required: false,
        serializedName: 'Message',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const ResponseModel = {
  required: false,
  serializedName: 'ResponseModel',
  type: {
    name: 'Composite',
    className: 'ResponseModel',
    modelProperties: {
      error: {
        required: false,
        serializedName: 'Error',
        type: {
          name: 'Composite',
          className: 'ErrorModel'
        }
      }
    }
  }
};

export const IssueIndicator = {
  required: false,
  serializedName: 'IssueIndicator',
  type: {
    name: 'Composite',
    className: 'IssueIndicator',
    modelProperties: {
      type: {
        required: false,
        serializedName: 'Type',
        type: {
          name: 'String'
        }
      },
      value: {
        required: false,
        serializedName: 'Value',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const IsAliveResponse = {
  required: false,
  serializedName: 'IsAliveResponse',
  type: {
    name: 'Composite',
    className: 'IsAliveResponse',
    modelProperties: {
      version: {
        required: false,
        serializedName: 'Version',
        type: {
          name: 'String'
        }
      },
      env: {
        required: false,
        serializedName: 'Env',
        type: {
          name: 'String'
        }
      },
      isDebug: {
        required: true,
        serializedName: 'IsDebug',
        type: {
          name: 'Boolean'
        }
      },
      issueIndicators: {
        required: false,
        serializedName: 'IssueIndicators',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'IssueIndicatorElementType',
              type: {
                name: 'Composite',
                className: 'IssueIndicator'
              }
          }
        }
      }
    }
  }
};

export const ErrorResponse = {
  required: false,
  serializedName: 'ErrorResponse',
  type: {
    name: 'Composite',
    className: 'ErrorResponse',
    modelProperties: {
      errorMessage: {
        required: false,
        readOnly: true,
        serializedName: 'ErrorMessage',
        type: {
          name: 'String'
        }
      },
      modelErrors: {
        required: false,
        readOnly: true,
        serializedName: 'ModelErrors',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serializedName: 'ArrayElementType',
              type: {
                name: 'Sequence',
                element: {
                    required: false,
                    serializedName: 'stringElementType',
                    type: {
                      name: 'String'
                    }
                }
              }
          }
        }
      }
    }
  }
};

export const VolumePrice = {
  required: false,
  serializedName: 'VolumePrice',
  type: {
    name: 'Composite',
    className: 'VolumePrice',
    modelProperties: {
      volume: {
        required: true,
        serializedName: 'Volume',
        type: {
          name: 'Number'
        }
      },
      price: {
        required: true,
        serializedName: 'Price',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const OrderBook = {
  required: false,
  serializedName: 'OrderBook',
  type: {
    name: 'Composite',
    className: 'OrderBook',
    modelProperties: {
      assetPair: {
        required: false,
        serializedName: 'AssetPair',
        type: {
          name: 'String'
        }
      },
      isBuy: {
        required: true,
        serializedName: 'IsBuy',
        type: {
          name: 'Boolean'
        }
      },
      timestamp: {
        required: true,
        serializedName: 'Timestamp',
        type: {
          name: 'DateTime'
        }
      },
      prices: {
        required: false,
        serializedName: 'Prices',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'VolumePriceElementType',
              type: {
                name: 'Composite',
                className: 'VolumePrice'
              }
          }
        }
      }
    }
  }
};

export const LimitOrderState = {
  required: false,
  serializedName: 'LimitOrderState',
  type: {
    name: 'Composite',
    className: 'LimitOrderState',
    modelProperties: {
      id: {
        required: true,
        serializedName: 'Id',
        type: {
          name: 'String'
        }
      },
      status: {
        required: false,
        serializedName: 'Status',
        type: {
          name: 'String'
        }
      },
      assetPairId: {
        required: false,
        serializedName: 'AssetPairId',
        type: {
          name: 'String'
        }
      },
      volume: {
        required: true,
        serializedName: 'Volume',
        type: {
          name: 'Number'
        }
      },
      price: {
        required: false,
        serializedName: 'Price',
        type: {
          name: 'Number'
        }
      },
      remainingVolume: {
        required: true,
        serializedName: 'RemainingVolume',
        type: {
          name: 'Number'
        }
      },
      lastMatchTime: {
        required: false,
        serializedName: 'LastMatchTime',
        type: {
          name: 'DateTime'
        }
      },
      createdAt: {
        required: true,
        serializedName: 'CreatedAt',
        type: {
          name: 'DateTime'
        }
      }
    }
  }
};

export const MarketOrderRequest = {
  required: false,
  serializedName: 'MarketOrderRequest',
  type: {
    name: 'Composite',
    className: 'MarketOrderRequest',
    modelProperties: {
      assetPairId: {
        required: false,
        serializedName: 'AssetPairId',
        type: {
          name: 'String'
        }
      },
      asset: {
        required: false,
        serializedName: 'Asset',
        type: {
          name: 'String'
        }
      },
      orderAction: {
        required: true,
        serializedName: 'OrderAction',
        type: {
          name: 'Enum',
          allowedValues: [ 'Buy', 'Sell' ]
        }
      },
      volume: {
        required: true,
        serializedName: 'Volume',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const ResponseModelDouble = {
  required: false,
  serializedName: 'ResponseModel[Double]',
  type: {
    name: 'Composite',
    className: 'ResponseModelDouble',
    modelProperties: {
      result: {
        required: true,
        serializedName: 'Result',
        type: {
          name: 'Number'
        }
      },
      error: {
        required: false,
        serializedName: 'Error',
        type: {
          name: 'Composite',
          className: 'ErrorModel'
        }
      }
    }
  }
};

export const LimitOrderRequest = {
  required: false,
  serializedName: 'LimitOrderRequest',
  type: {
    name: 'Composite',
    className: 'LimitOrderRequest',
    modelProperties: {
      assetPairId: {
        required: false,
        serializedName: 'AssetPairId',
        type: {
          name: 'String'
        }
      },
      orderAction: {
        required: true,
        serializedName: 'OrderAction',
        type: {
          name: 'Enum',
          allowedValues: [ 'Buy', 'Sell' ]
        }
      },
      volume: {
        required: true,
        serializedName: 'Volume',
        type: {
          name: 'Number'
        }
      },
      price: {
        required: true,
        serializedName: 'Price',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const ClientBalanceResponseModel = {
  required: false,
  serializedName: 'ClientBalanceResponseModel',
  type: {
    name: 'Composite',
    className: 'ClientBalanceResponseModel',
    modelProperties: {
      assetId: {
        required: false,
        serializedName: 'AssetId',
        type: {
          name: 'String'
        }
      },
      balance: {
        required: true,
        serializedName: 'Balance',
        type: {
          name: 'Number'
        }
      },
      reserved: {
        required: true,
        serializedName: 'Reserved',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const HighFrequencytradingAPIGetTradesOptionalParams = {
  required: false,
  serializedName: 'GetTradesOptions',
  type: {
    name: 'Composite',
    className: 'HighFrequencytradingAPIGetTradesOptionalParams',
    modelProperties: {
      assetId: {
        required: false,
        serializedName: 'assetId',
        type: {
          name: 'String'
        }
      },
      assetPairId: {
        required: false,
        serializedName: 'assetPairId',
        type: {
          name: 'String'
        }
      },
      skip: {
        required: false,
        serializedName: 'skip',
        type: {
          name: 'Number'
        }
      },
      take: {
        required: false,
        serializedName: 'take',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const HighFrequencytradingAPIGetOrdersOptionalParams = {
  required: false,
  serializedName: 'GetOrdersOptions',
  type: {
    name: 'Composite',
    className: 'HighFrequencytradingAPIGetOrdersOptionalParams',
    modelProperties: {
      status: {
        required: false,
        serializedName: 'status',
        type: {
          name: 'Enum',
          allowedValues: [ 'All', 'Open', 'InOrderBook', 'Processing', 'Matched', 'Cancelled', 'Rejected' ]
        }
      },
      take: {
        required: false,
        serializedName: 'take',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const HighFrequencytradingAPIPlaceMarketOrderOptionalParams = {
  required: false,
  serializedName: 'PlaceMarketOrderOptions',
  type: {
    name: 'Composite',
    className: 'HighFrequencytradingAPIPlaceMarketOrderOptionalParams',
    modelProperties: {
      order: {
        required: false,
        serializedName: 'order',
        type: {
          name: 'Composite',
          className: 'MarketOrderRequest'
        }
      }
    }
  }
};

export const HighFrequencytradingAPIPlaceLimitOrderOptionalParams = {
  required: false,
  serializedName: 'PlaceLimitOrderOptions',
  type: {
    name: 'Composite',
    className: 'HighFrequencytradingAPIPlaceLimitOrderOptionalParams',
    modelProperties: {
      order: {
        required: false,
        serializedName: 'order',
        type: {
          name: 'Composite',
          className: 'LimitOrderRequest'
        }
      }
    }
  }
};
