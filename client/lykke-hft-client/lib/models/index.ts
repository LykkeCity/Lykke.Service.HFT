/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { RequestOptionsBase } from "ms-rest-js";


/**
 * @interface
 * An interface representing AssetPairModel.
 */
export interface AssetPairModel {
  /**
   * @member {string} [id]
   */
  id?: string;
  /**
   * @member {string} [name]
   */
  name?: string;
  /**
   * @member {number} accuracy
   */
  accuracy: number;
  /**
   * @member {number} invertedAccuracy
   */
  invertedAccuracy: number;
  /**
   * @member {string} [baseAssetId]
   */
  baseAssetId?: string;
  /**
   * @member {string} [quotingAssetId]
   */
  quotingAssetId?: string;
  /**
   * @member {number} minVolume
   */
  minVolume: number;
  /**
   * @member {number} minInvertedVolume
   */
  minInvertedVolume: number;
}

/**
 * @interface
 * An interface representing Fee.
 */
export interface Fee {
  /**
   * @member {number} amount
   */
  amount: number;
  /**
   * @member {FeeType} type Possible values include: 'Unknown', 'Absolute',
   * 'Relative'
   */
  type: FeeType;
}

/**
 * @interface
 * An interface representing HistoryTradeModel.
 */
export interface HistoryTradeModel {
  /**
   * @member {string} [id]
   */
  id?: string;
  /**
   * @member {Date} dateTime
   */
  dateTime: Date;
  /**
   * @member {HistoryOperationState} state Possible values include:
   * 'InProgress', 'Finished', 'Canceled', 'Failed'
   */
  state: HistoryOperationState;
  /**
   * @member {number} amount
   */
  amount: number;
  /**
   * @member {string} [asset]
   */
  asset?: string;
  /**
   * @member {string} [assetPair]
   */
  assetPair?: string;
  /**
   * @member {number} [price]
   */
  price?: number;
  /**
   * @member {Fee} [fee]
   */
  fee?: Fee;
}

/**
 * @interface
 * An interface representing ErrorModel.
 */
export interface ErrorModel {
  /**
   * @member {ErrorCodeType} code Possible values include: 'InvalidInputField',
   * 'LowBalance', 'AlreadyProcessed', 'UnknownAsset', 'NoLiquidity',
   * 'NotEnoughFunds', 'Dust', 'ReservedVolumeHigherThanBalance', 'NotFound',
   * 'BalanceLowerThanReserved', 'LeadToNegativeSpread', 'Runtime'
   */
  code: ErrorCodeType;
  /**
   * @member {string} [field]
   */
  field?: string;
  /**
   * @member {string} [message]
   */
  message?: string;
}

/**
 * @interface
 * An interface representing ResponseModel.
 */
export interface ResponseModel {
  /**
   * @member {ErrorModel} [error]
   */
  error?: ErrorModel;
}

/**
 * @interface
 * An interface representing IssueIndicator.
 */
export interface IssueIndicator {
  /**
   * @member {string} [type]
   */
  type?: string;
  /**
   * @member {string} [value]
   */
  value?: string;
}

/**
 * @interface
 * An interface representing IsAliveResponse.
 */
export interface IsAliveResponse {
  /**
   * @member {string} [version]
   */
  version?: string;
  /**
   * @member {string} [env]
   */
  env?: string;
  /**
   * @member {boolean} isDebug
   */
  isDebug: boolean;
  /**
   * @member {IssueIndicator[]} [issueIndicators]
   */
  issueIndicators?: IssueIndicator[];
}

/**
 * @interface
 * An interface representing ErrorResponse.
 */
export interface ErrorResponse {
  /**
   * @member {string} [errorMessage]
   */
  readonly errorMessage?: string;
  /**
   * @member {{ [propertyName: string]: string[] }} [modelErrors]
   */
  readonly modelErrors?: { [propertyName: string]: string[] };
}

/**
 * @interface
 * An interface representing VolumePrice.
 */
export interface VolumePrice {
  /**
   * @member {number} volume
   */
  volume: number;
  /**
   * @member {number} price
   */
  price: number;
}

/**
 * @interface
 * An interface representing OrderBook.
 */
export interface OrderBook {
  /**
   * @member {string} [assetPair]
   */
  assetPair?: string;
  /**
   * @member {boolean} isBuy
   */
  isBuy: boolean;
  /**
   * @member {Date} timestamp
   */
  timestamp: Date;
  /**
   * @member {VolumePrice[]} [prices]
   */
  prices?: VolumePrice[];
}

/**
 * @interface
 * An interface representing LimitOrderState.
 */
export interface LimitOrderState {
  /**
   * @member {string} id
   */
  id: string;
  /**
   * @member {string} [status]
   */
  status?: string;
  /**
   * @member {string} [assetPairId]
   */
  assetPairId?: string;
  /**
   * @member {number} volume
   */
  volume: number;
  /**
   * @member {number} [price]
   */
  price?: number;
  /**
   * @member {number} remainingVolume
   */
  remainingVolume: number;
  /**
   * @member {Date} [lastMatchTime]
   */
  lastMatchTime?: Date;
  /**
   * @member {Date} createdAt
   */
  createdAt: Date;
}

/**
 * @interface
 * An interface representing MarketOrderRequest.
 */
export interface MarketOrderRequest {
  /**
   * @member {string} [assetPairId]
   */
  assetPairId?: string;
  /**
   * @member {string} [asset]
   */
  asset?: string;
  /**
   * @member {OrderAction} orderAction Possible values include: 'Buy', 'Sell'
   */
  orderAction: OrderAction;
  /**
   * @member {number} volume
   */
  volume: number;
}

/**
 * @interface
 * An interface representing ResponseModelDouble.
 */
export interface ResponseModelDouble {
  /**
   * @member {number} result
   */
  result: number;
  /**
   * @member {ErrorModel} [error]
   */
  error?: ErrorModel;
}

/**
 * @interface
 * An interface representing LimitOrderRequest.
 */
export interface LimitOrderRequest {
  /**
   * @member {string} [assetPairId]
   */
  assetPairId?: string;
  /**
   * @member {OrderAction} orderAction Possible values include: 'Buy', 'Sell'
   */
  orderAction: OrderAction;
  /**
   * @member {number} volume
   */
  volume: number;
  /**
   * @member {number} price
   */
  price: number;
}

/**
 * @interface
 * An interface representing ClientBalanceResponseModel.
 */
export interface ClientBalanceResponseModel {
  /**
   * @member {string} [assetId]
   */
  assetId?: string;
  /**
   * @member {number} balance
   */
  balance: number;
  /**
   * @member {number} reserved
   */
  reserved: number;
}

/**
 * @interface
 * An interface representing HighFrequencytradingAPIGetTradesOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface HighFrequencytradingAPIGetTradesOptionalParams extends RequestOptionsBase {
  /**
   * @member {string} [assetId] Asset identifier
   */
  assetId?: string;
  /**
   * @member {string} [assetPairId] Asset-pair identifier
   */
  assetPairId?: string;
  /**
   * @member {number} [skip] How many items skip before returning
   */
  skip?: number;
  /**
   * @member {number} [take] How many maximum items have to be returned
   */
  take?: number;
}

/**
 * @interface
 * An interface representing HighFrequencytradingAPIGetOrdersOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface HighFrequencytradingAPIGetOrdersOptionalParams extends RequestOptionsBase {
  /**
   * @member {OrderStatus} [status] Order status. Possible values include:
   * 'All', 'Open', 'InOrderBook', 'Processing', 'Matched', 'Cancelled',
   * 'Rejected'
   */
  status?: OrderStatus;
  /**
   * @member {number} [take] Default 100; max 500.
   */
  take?: number;
}

/**
 * @interface
 * An interface representing HighFrequencytradingAPIPlaceMarketOrderOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface HighFrequencytradingAPIPlaceMarketOrderOptionalParams extends RequestOptionsBase {
  /**
   * @member {MarketOrderRequest} [order]
   */
  order?: MarketOrderRequest;
}

/**
 * @interface
 * An interface representing HighFrequencytradingAPIPlaceLimitOrderOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface HighFrequencytradingAPIPlaceLimitOrderOptionalParams extends RequestOptionsBase {
  /**
   * @member {LimitOrderRequest} [order]
   */
  order?: LimitOrderRequest;
}

/**
 * Defines values for HistoryOperationState.
 * Possible values include: 'InProgress', 'Finished', 'Canceled', 'Failed'
 * @readonly
 * @enum {string}
 */
export enum HistoryOperationState {
  InProgress = 'InProgress',
  Finished = 'Finished',
  Canceled = 'Canceled',
  Failed = 'Failed',
}

/**
 * Defines values for FeeType.
 * Possible values include: 'Unknown', 'Absolute', 'Relative'
 * @readonly
 * @enum {string}
 */
export enum FeeType {
  Unknown = 'Unknown',
  Absolute = 'Absolute',
  Relative = 'Relative',
}

/**
 * Defines values for ErrorCodeType.
 * Possible values include: 'InvalidInputField', 'LowBalance',
 * 'AlreadyProcessed', 'UnknownAsset', 'NoLiquidity', 'NotEnoughFunds', 'Dust',
 * 'ReservedVolumeHigherThanBalance', 'NotFound', 'BalanceLowerThanReserved',
 * 'LeadToNegativeSpread', 'Runtime'
 * @readonly
 * @enum {string}
 */
export enum ErrorCodeType {
  InvalidInputField = 'InvalidInputField',
  LowBalance = 'LowBalance',
  AlreadyProcessed = 'AlreadyProcessed',
  UnknownAsset = 'UnknownAsset',
  NoLiquidity = 'NoLiquidity',
  NotEnoughFunds = 'NotEnoughFunds',
  Dust = 'Dust',
  ReservedVolumeHigherThanBalance = 'ReservedVolumeHigherThanBalance',
  NotFound = 'NotFound',
  BalanceLowerThanReserved = 'BalanceLowerThanReserved',
  LeadToNegativeSpread = 'LeadToNegativeSpread',
  Runtime = 'Runtime',
}

/**
 * Defines values for OrderAction.
 * Possible values include: 'Buy', 'Sell'
 * @readonly
 * @enum {string}
 */
export enum OrderAction {
  Buy = 'Buy',
  Sell = 'Sell',
}

/**
 * Defines values for OrderStatus.
 * Possible values include: 'All', 'Open', 'InOrderBook', 'Processing',
 * 'Matched', 'Cancelled', 'Rejected'
 * @readonly
 * @enum {string}
 */
export enum OrderStatus {
  All = 'All',
  Open = 'Open',
  InOrderBook = 'InOrderBook',
  Processing = 'Processing',
  Matched = 'Matched',
  Cancelled = 'Cancelled',
  Rejected = 'Rejected',
}
