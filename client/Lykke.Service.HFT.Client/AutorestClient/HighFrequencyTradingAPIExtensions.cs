// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.HFT.Client.AutorestClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for HighFrequencyTradingAPI.
    /// </summary>
    public static partial class HighFrequencyTradingAPIExtensions
    {
            /// <summary>
            /// Get all asset pairs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<AssetPairModel> AssetPairs(this IHighFrequencyTradingAPI operations)
            {
                return operations.AssetPairsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all asset pairs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AssetPairModel>> AssetPairsAsync(this IHighFrequencyTradingAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AssetPairsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get specified asset pair.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Asset pair ID. Example: AUDUSD
            /// </param>
            public static AssetPairModel AssetPairsid(this IHighFrequencyTradingAPI operations, string id)
            {
                return operations.AssetPairsidAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get specified asset pair.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Asset pair ID. Example: AUDUSD
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AssetPairModel> AssetPairsidAsync(this IHighFrequencyTradingAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AssetPairsidWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object IsAlive(this IHighFrequencyTradingAPI operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsAliveAsync(this IHighFrequencyTradingAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all order books.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<OrderBook> OrderBooks(this IHighFrequencyTradingAPI operations)
            {
                return operations.OrderBooksAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all order books.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<OrderBook>> OrderBooksAsync(this IHighFrequencyTradingAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.OrderBooksWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all client orders.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='status'>
            /// Possible values include: 'Pending', 'InOrderBook', 'Processing', 'Matched',
            /// 'NotEnoughFunds', 'NoLiquidity', 'UnknownAsset', 'Cancelled',
            /// 'LeadToNegativeSpread'
            /// </param>
            public static IList<LimitOrderState> GetOrders(this IHighFrequencyTradingAPI operations, string apiKey, string status = default(string))
            {
                return operations.GetOrdersAsync(apiKey, status).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all client orders.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='status'>
            /// Possible values include: 'Pending', 'InOrderBook', 'Processing', 'Matched',
            /// 'NotEnoughFunds', 'NoLiquidity', 'UnknownAsset', 'Cancelled',
            /// 'LeadToNegativeSpread'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LimitOrderState>> GetOrdersAsync(this IHighFrequencyTradingAPI operations, string apiKey, string status = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOrdersWithHttpMessagesAsync(apiKey, status, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Place a market order.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='order'>
            /// </param>
            public static ResponseModelDouble PlaceMarketOrder(this IHighFrequencyTradingAPI operations, string apiKey, MarketOrderRequest order = default(MarketOrderRequest))
            {
                return operations.PlaceMarketOrderAsync(apiKey, order).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Place a market order.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='order'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResponseModelDouble> PlaceMarketOrderAsync(this IHighFrequencyTradingAPI operations, string apiKey, MarketOrderRequest order = default(MarketOrderRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PlaceMarketOrderWithHttpMessagesAsync(apiKey, order, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Place a limit order.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='order'>
            /// </param>
            public static object PlaceLimitOrder(this IHighFrequencyTradingAPI operations, string apiKey, LimitOrderRequest order = default(LimitOrderRequest))
            {
                return operations.PlaceLimitOrderAsync(apiKey, order).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Place a limit order.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='order'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PlaceLimitOrderAsync(this IHighFrequencyTradingAPI operations, string apiKey, LimitOrderRequest order = default(LimitOrderRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PlaceLimitOrderWithHttpMessagesAsync(apiKey, order, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancel the limit order.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Limit order id (Guid)
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static void CancelLimitOrder(this IHighFrequencyTradingAPI operations, System.Guid id, string apiKey)
            {
                operations.CancelLimitOrderAsync(id, apiKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel the limit order.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Limit order id (Guid)
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelLimitOrderAsync(this IHighFrequencyTradingAPI operations, System.Guid id, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CancelLimitOrderWithHttpMessagesAsync(id, apiKey, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the order info.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Limit order id (Guid)
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static LimitOrderState GetOrderInfo(this IHighFrequencyTradingAPI operations, System.Guid id, string apiKey)
            {
                return operations.GetOrderInfoAsync(id, apiKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the order info.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Limit order id (Guid)
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LimitOrderState> GetOrderInfoAsync(this IHighFrequencyTradingAPI operations, System.Guid id, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOrderInfoWithHttpMessagesAsync(id, apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get balance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static IList<Wallet> Wallets(this IHighFrequencyTradingAPI operations, string apiKey)
            {
                return operations.WalletsAsync(apiKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get balance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Wallet>> WalletsAsync(this IHighFrequencyTradingAPI operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WalletsWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
