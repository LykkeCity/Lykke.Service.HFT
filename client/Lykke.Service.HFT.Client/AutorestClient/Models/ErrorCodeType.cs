// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.HFT.AutorestClient.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for ErrorCodeType.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ErrorCodeType
    {
        [EnumMember(Value = "InvalidInputField")]
        InvalidInputField,
        [EnumMember(Value = "BadRequest")]
        BadRequest,
        [EnumMember(Value = "LowBalance")]
        LowBalance,
        [EnumMember(Value = "AlreadyProcessed")]
        AlreadyProcessed,
        [EnumMember(Value = "UnknownAsset")]
        UnknownAsset,
        [EnumMember(Value = "NoLiquidity")]
        NoLiquidity,
        [EnumMember(Value = "NotEnoughFunds")]
        NotEnoughFunds,
        [EnumMember(Value = "Dust")]
        Dust,
        [EnumMember(Value = "ReservedVolumeHigherThanBalance")]
        ReservedVolumeHigherThanBalance,
        [EnumMember(Value = "NotFound")]
        NotFound,
        [EnumMember(Value = "BalanceLowerThanReserved")]
        BalanceLowerThanReserved,
        [EnumMember(Value = "LeadToNegativeSpread")]
        LeadToNegativeSpread,
        [EnumMember(Value = "InvalidFee")]
        InvalidFee,
        [EnumMember(Value = "Duplicate")]
        Duplicate,
        [EnumMember(Value = "InvalidPrice")]
        InvalidPrice,
        [EnumMember(Value = "Replaced")]
        Replaced,
        [EnumMember(Value = "NotFoundPrevious")]
        NotFoundPrevious,
        [EnumMember(Value = "Runtime")]
        Runtime
    }
    internal static class ErrorCodeTypeEnumExtension
    {
        internal static string ToSerializedValue(this ErrorCodeType? value)
        {
            return value == null ? null : ((ErrorCodeType)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this ErrorCodeType value)
        {
            switch( value )
            {
                case ErrorCodeType.InvalidInputField:
                    return "InvalidInputField";
                case ErrorCodeType.BadRequest:
                    return "BadRequest";
                case ErrorCodeType.LowBalance:
                    return "LowBalance";
                case ErrorCodeType.AlreadyProcessed:
                    return "AlreadyProcessed";
                case ErrorCodeType.UnknownAsset:
                    return "UnknownAsset";
                case ErrorCodeType.NoLiquidity:
                    return "NoLiquidity";
                case ErrorCodeType.NotEnoughFunds:
                    return "NotEnoughFunds";
                case ErrorCodeType.Dust:
                    return "Dust";
                case ErrorCodeType.ReservedVolumeHigherThanBalance:
                    return "ReservedVolumeHigherThanBalance";
                case ErrorCodeType.NotFound:
                    return "NotFound";
                case ErrorCodeType.BalanceLowerThanReserved:
                    return "BalanceLowerThanReserved";
                case ErrorCodeType.LeadToNegativeSpread:
                    return "LeadToNegativeSpread";
                case ErrorCodeType.InvalidFee:
                    return "InvalidFee";
                case ErrorCodeType.Duplicate:
                    return "Duplicate";
                case ErrorCodeType.InvalidPrice:
                    return "InvalidPrice";
                case ErrorCodeType.Replaced:
                    return "Replaced";
                case ErrorCodeType.NotFoundPrevious:
                    return "NotFoundPrevious";
                case ErrorCodeType.Runtime:
                    return "Runtime";
            }
            return null;
        }

        internal static ErrorCodeType? ParseErrorCodeType(this string value)
        {
            switch( value )
            {
                case "InvalidInputField":
                    return ErrorCodeType.InvalidInputField;
                case "BadRequest":
                    return ErrorCodeType.BadRequest;
                case "LowBalance":
                    return ErrorCodeType.LowBalance;
                case "AlreadyProcessed":
                    return ErrorCodeType.AlreadyProcessed;
                case "UnknownAsset":
                    return ErrorCodeType.UnknownAsset;
                case "NoLiquidity":
                    return ErrorCodeType.NoLiquidity;
                case "NotEnoughFunds":
                    return ErrorCodeType.NotEnoughFunds;
                case "Dust":
                    return ErrorCodeType.Dust;
                case "ReservedVolumeHigherThanBalance":
                    return ErrorCodeType.ReservedVolumeHigherThanBalance;
                case "NotFound":
                    return ErrorCodeType.NotFound;
                case "BalanceLowerThanReserved":
                    return ErrorCodeType.BalanceLowerThanReserved;
                case "LeadToNegativeSpread":
                    return ErrorCodeType.LeadToNegativeSpread;
                case "InvalidFee":
                    return ErrorCodeType.InvalidFee;
                case "Duplicate":
                    return ErrorCodeType.Duplicate;
                case "InvalidPrice":
                    return ErrorCodeType.InvalidPrice;
                case "Replaced":
                    return ErrorCodeType.Replaced;
                case "NotFoundPrevious":
                    return ErrorCodeType.NotFoundPrevious;
                case "Runtime":
                    return ErrorCodeType.Runtime;
            }
            return null;
        }
    }
}
