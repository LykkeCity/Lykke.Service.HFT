// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.HFT.AutorestClient.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for ErrorCodeType.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ErrorCodeType
    {
        [EnumMember(Value = "InvalidInputField")]
        InvalidInputField,
        [EnumMember(Value = "Ok")]
        Ok,
        [EnumMember(Value = "LowBalance")]
        LowBalance,
        [EnumMember(Value = "AlreadyProcessed")]
        AlreadyProcessed,
        [EnumMember(Value = "UnknownAsset")]
        UnknownAsset,
        [EnumMember(Value = "NoLiquidity")]
        NoLiquidity,
        [EnumMember(Value = "NotEnoughFunds")]
        NotEnoughFunds,
        [EnumMember(Value = "Dust")]
        Dust,
        [EnumMember(Value = "ReservedVolumeHigherThanBalance")]
        ReservedVolumeHigherThanBalance,
        [EnumMember(Value = "NotFound")]
        NotFound,
        [EnumMember(Value = "BalanceLowerThanReserved")]
        BalanceLowerThanReserved,
        [EnumMember(Value = "LeadToNegativeSpread")]
        LeadToNegativeSpread,
        [EnumMember(Value = "PriceGapTooHigh")]
        PriceGapTooHigh,
        [EnumMember(Value = "RuntimeError")]
        RuntimeError
    }
    internal static class ErrorCodeTypeEnumExtension
    {
        internal static string ToSerializedValue(this ErrorCodeType? value)
        {
            return value == null ? null : ((ErrorCodeType)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this ErrorCodeType value)
        {
            switch( value )
            {
                case ErrorCodeType.InvalidInputField:
                    return "InvalidInputField";
                case ErrorCodeType.Ok:
                    return "Ok";
                case ErrorCodeType.LowBalance:
                    return "LowBalance";
                case ErrorCodeType.AlreadyProcessed:
                    return "AlreadyProcessed";
                case ErrorCodeType.UnknownAsset:
                    return "UnknownAsset";
                case ErrorCodeType.NoLiquidity:
                    return "NoLiquidity";
                case ErrorCodeType.NotEnoughFunds:
                    return "NotEnoughFunds";
                case ErrorCodeType.Dust:
                    return "Dust";
                case ErrorCodeType.ReservedVolumeHigherThanBalance:
                    return "ReservedVolumeHigherThanBalance";
                case ErrorCodeType.NotFound:
                    return "NotFound";
                case ErrorCodeType.BalanceLowerThanReserved:
                    return "BalanceLowerThanReserved";
                case ErrorCodeType.LeadToNegativeSpread:
                    return "LeadToNegativeSpread";
                case ErrorCodeType.PriceGapTooHigh:
                    return "PriceGapTooHigh";
                case ErrorCodeType.RuntimeError:
                    return "RuntimeError";
            }
            return null;
        }

        internal static ErrorCodeType? ParseErrorCodeType(this string value)
        {
            switch( value )
            {
                case "InvalidInputField":
                    return ErrorCodeType.InvalidInputField;
                case "Ok":
                    return ErrorCodeType.Ok;
                case "LowBalance":
                    return ErrorCodeType.LowBalance;
                case "AlreadyProcessed":
                    return ErrorCodeType.AlreadyProcessed;
                case "UnknownAsset":
                    return ErrorCodeType.UnknownAsset;
                case "NoLiquidity":
                    return ErrorCodeType.NoLiquidity;
                case "NotEnoughFunds":
                    return ErrorCodeType.NotEnoughFunds;
                case "Dust":
                    return ErrorCodeType.Dust;
                case "ReservedVolumeHigherThanBalance":
                    return ErrorCodeType.ReservedVolumeHigherThanBalance;
                case "NotFound":
                    return ErrorCodeType.NotFound;
                case "BalanceLowerThanReserved":
                    return ErrorCodeType.BalanceLowerThanReserved;
                case "LeadToNegativeSpread":
                    return ErrorCodeType.LeadToNegativeSpread;
                case "PriceGapTooHigh":
                    return ErrorCodeType.PriceGapTooHigh;
                case "RuntimeError":
                    return ErrorCodeType.RuntimeError;
            }
            return null;
        }
    }
}
